from paramiko.sftp import BaseSFTP
from paramiko.util import ClosingContextManager
from typing import Any, Optional

b_slash: bytes

class SFTPClient(BaseSFTP, ClosingContextManager):
    sock: Any = ...
    ultra_debug: bool = ...
    request_number: int = ...
    logger: Any = ...
    def __init__(self, sock: Any) -> None: ...
    @classmethod
    def from_transport(cls, t: Any, window_size: Optional[Any] = ..., max_packet_size: Optional[Any] = ...) -> SFTPClient: ...
    def close(self) -> None: ...
    def get_channel(self) -> Any: ...
    def listdir(self, path: str = ...) -> Any: ...
    def listdir_attr(self, path: str = ...) -> Any: ...
    def listdir_iter(self, path: str = ..., read_aheads: int = ...) -> None: ...
    def open(self, filename: Any, mode: str = ..., bufsize: int = ...) -> Any: ...
    file: Any = ...
    def remove(self, path: Any) -> None: ...
    unlink: Any = ...
    def rename(self, oldpath: Any, newpath: Any) -> None: ...
    def posix_rename(self, oldpath: Any, newpath: Any) -> None: ...
    def mkdir(self, path: Any, mode: Any = ...) -> None: ...
    def rmdir(self, path: Any) -> None: ...
    def stat(self, path: Any) -> Any: ...
    def lstat(self, path: Any) -> Any: ...
    def symlink(self, source: Any, dest: Any) -> None: ...
    def chmod(self, path: Any, mode: Any) -> None: ...
    def chown(self, path: Any, uid: Any, gid: Any) -> None: ...
    def utime(self, path: Any, times: Any) -> None: ...
    def truncate(self, path: Any, size: Any) -> None: ...
    def readlink(self, path: Any) -> Any: ...
    def normalize(self, path: str) -> str: ...
    def chdir(self, path: Optional[Any] = ...) -> None: ...
    def getcwd(self) -> Any: ...
    def putfo(self, fl: Any, remotepath: Any, file_size: int = ..., callback: Optional[Any] = ..., confirm: bool = ...) -> Any: ...
    def put(self, localpath: Any, remotepath: Any, callback: Optional[Any] = ..., confirm: bool = ...) -> Any: ...
    def getfo(self, remotepath: Any, fl: Any, callback: Optional[Any] = ...) -> Any: ...
    def get(self, remotepath: Any, localpath: Any, callback: Optional[Any] = ...) -> None: ...

class SFTP(SFTPClient): ...
