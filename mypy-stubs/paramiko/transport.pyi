import threading
from paramiko.util import ClosingContextManager
from typing import Any, Optional

class Transport(threading.Thread, ClosingContextManager):
    active: bool = ...
    hostname: Any = ...
    sock: Any = ...
    packetizer: Any = ...
    local_version: Any = ...
    remote_version: str = ...
    local_cipher: str = ...
    local_kex_init: Any = ...
    local_mac: Any = ...
    local_compression: Any = ...
    session_id: Any = ...
    host_key_type: Any = ...
    host_key: Any = ...
    use_gss_kex: Any = ...
    gss_kex_used: bool = ...
    kexgss_ctxt: Any = ...
    gss_host: Any = ...
    kex_engine: Any = ...
    H: Any = ...
    K: Any = ...
    initial_kex_done: bool = ...
    in_kex: bool = ...
    authenticated: bool = ...
    lock: Any = ...
    channel_events: Any = ...
    channels_seen: Any = ...
    default_max_packet_size: Any = ...
    default_window_size: Any = ...
    saved_exception: Any = ...
    clear_to_send: Any = ...
    clear_to_send_lock: Any = ...
    clear_to_send_timeout: float = ...
    log_name: str = ...
    logger: Any = ...
    auth_handler: Any = ...
    global_response: Any = ...
    completion_event: Any = ...
    banner_timeout: int = ...
    handshake_timeout: int = ...
    auth_timeout: int = ...
    disabled_algorithms: Any = ...
    server_mode: bool = ...
    server_object: Any = ...
    server_key_dict: Any = ...
    server_accepts: Any = ...
    server_accept_cv: Any = ...
    subsystem_table: Any = ...
    def __init__(self, sock: Any, default_window_size: Any = ..., default_max_packet_size: Any = ..., gss_kex: bool = ..., gss_deleg_creds: bool = ..., disabled_algorithms: Optional[Any] = ...) -> None: ...
    @property
    def preferred_ciphers(self) -> Any: ...
    @property
    def preferred_macs(self) -> Any: ...
    @property
    def preferred_keys(self) -> Any: ...
    @property
    def preferred_kex(self) -> Any: ...
    @property
    def preferred_compression(self) -> Any: ...
    def atfork(self) -> None: ...
    def get_security_options(self) -> Any: ...
    def set_gss_host(self, gss_host: Any, trust_dns: bool = ..., gssapi_requested: bool = ...) -> None: ...
    def start_client(self, event: Optional[Any] = ..., timeout: Optional[Any] = ...) -> None: ...
    def start_server(self, event: Optional[Any] = ..., server: Optional[Any] = ...) -> None: ...
    def add_server_key(self, key: Any) -> None: ...
    def get_server_key(self) -> Any: ...
    @staticmethod
    def load_server_moduli(filename: Optional[Any] = ...) -> Any: ...
    def close(self) -> None: ...
    def get_remote_server_key(self) -> Any: ...
    def is_active(self) -> Any: ...
    def open_session(self, window_size: Optional[Any] = ..., max_packet_size: Optional[Any] = ..., timeout: Optional[Any] = ...) -> Any: ...
    def open_x11_channel(self, src_addr: Optional[Any] = ...) -> Any: ...
    def open_forward_agent_channel(self) -> Any: ...
    def open_forwarded_tcpip_channel(self, src_addr: Any, dest_addr: Any) -> Any: ...
    def open_channel(self, kind: Any, dest_addr: Optional[Any] = ..., src_addr: Optional[Any] = ..., window_size: Optional[Any] = ..., max_packet_size: Optional[Any] = ..., timeout: Optional[Any] = ...) -> Any: ...
    def request_port_forward(self, address: Any, port: Any, handler: Optional[Any] = ...) -> Any: ...
    def cancel_port_forward(self, address: Any, port: Any) -> None: ...
    def open_sftp_client(self) -> Any: ...
    def send_ignore(self, byte_count: Optional[Any] = ...) -> None: ...
    def renegotiate_keys(self) -> None: ...
    def set_keepalive(self, interval: Any) -> Any: ...
    def global_request(self, kind: Any, data: Optional[Any] = ..., wait: bool = ...) -> Any: ...
    def accept(self, timeout: Optional[Any] = ...) -> Any: ...
    def connect(self, hostkey: Optional[Any] = ..., username: str = ..., password: Optional[Any] = ..., pkey: Optional[Any] = ..., gss_host: Optional[Any] = ..., gss_auth: bool = ..., gss_kex: bool = ..., gss_deleg_creds: bool = ..., gss_trust_dns: bool = ...) -> None: ...
    def get_exception(self) -> Any: ...
    def set_subsystem_handler(self, name: Any, handler: Any, *larg: Any, **kwarg: Any) -> None: ...
    def is_authenticated(self) -> Any: ...
    def get_username(self) -> Any: ...
    def get_banner(self) -> Any: ...
    def auth_none(self, username: Any) -> Any: ...
    def auth_password(self, username: Any, password: Any, event: Optional[Any] = ..., fallback: bool = ...) -> Any: ...
    def auth_publickey(self, username: Any, key: Any, event: Optional[Any] = ...) -> Any: ...
    def auth_interactive(self, username: Any, handler: Any, submethods: str = ...) -> Any: ...
    def auth_interactive_dumb(self, username: Any, handler: Optional[Any] = ..., submethods: str = ...) -> Any: ...
    def auth_gssapi_with_mic(self, username: Any, gss_host: Any, gss_deleg_creds: Any) -> Any: ...
    def auth_gssapi_keyex(self, username: Any) -> Any: ...
    def set_log_channel(self, name: Any) -> None: ...
    def get_log_channel(self) -> Any: ...
    def set_hexdump(self, hexdump: Any) -> None: ...
    def get_hexdump(self) -> Any: ...
    def use_compression(self, compress: bool = ...) -> None: ...
    def getpeername(self) -> Any: ...
    def stop_thread(self) -> None: ...
    sys: Any = ...
    def run(self) -> None: ...

class SecurityOptions:
    def __init__(self, transport: Any) -> None: ...
    @property
    def ciphers(self) -> Any: ...
    @ciphers.setter
    def ciphers(self, x: Any) -> None: ...
    @property
    def digests(self) -> Any: ...
    @digests.setter
    def digests(self, x: Any) -> None: ...
    @property
    def key_types(self) -> Any: ...
    @key_types.setter
    def key_types(self, x: Any) -> None: ...
    @property
    def kex(self) -> Any: ...
    @kex.setter
    def kex(self, x: Any) -> None: ...
    @property
    def compression(self) -> Any: ...
    @compression.setter
    def compression(self, x: Any) -> None: ...

class ChannelMap:
    def __init__(self) -> None: ...
    def put(self, chanid: Any, chan: Any) -> None: ...
    def get(self, chanid: Any) -> Any: ...
    def delete(self, chanid: Any) -> None: ...
    def values(self) -> Any: ...
    def __len__(self) -> Any: ...
