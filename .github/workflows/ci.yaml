name: Parsl

on:
  pull_request:
    types:
      - opened
      - synchronize

jobs:
  main-test-suite:
    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10"]
        makefile-target: [ # "lint flake8 mypy",
                           # "local_thread_test",
                           # "htex_local_test",
                           # "htex_local_alternate_test",
                          "clean_coverage lint flake8 mypy local_thread_test htex_local_test htex_local_alternate_test workqueue_ex_test workqueue_ex_test" ]
                           # "config_local_test"]
    runs-on: ubuntu-20.04
    timeout-minutes: 30

    steps:
    - uses: actions/checkout@master

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Non-requirements based install
      run: |
        sudo apt-get update -q
        python -m pip install Cython
        python -m pip install numpy
        python --version
        python -m cython --version
        python -c "import numpy;print(numpy.__version__)"

        # this is to make the workqueue binary installer happy
        sudo apt-get install -y libpython3.5

    - name: make deps clean_coverage
      run: |
        make deps
        make clean_coverage

    - name: make ${{ matrix.makefile-target }}
      run: |
        make ${{ matrix.makefile-target }}

    - name: Checking parsl-visualize
      run: |
        sudo apt-get install -y graphviz
        pip install .[monitoring]
        parsl/tests/test-viz.sh

    - name: Check monitoring did not report errors
      run: |
        # assert that none of the runs in this test have put an ERROR message into a
        # database manager log file or monitoring router log file. It would be better if
        # the tests themselves failed immediately when there was a monitoring error, but
        # in the absence of that, this is a dirty way to check.
        bash -c '! grep ERROR runinfo*/*/database_manager.log'
        bash -c '! grep ERROR runinfo*/*/monitoring_router.log'


    - name: make coverage
      run: |
        make coverage

    - name: Archive runinfo logs
      if: ${{ always() }}
      uses: actions/upload-artifact@v2
      with:
        name: runinfo-${{ matrix.python-version }}
        path: runinfo/

  documentation:
    runs-on: ubuntu-20.04
    timeout-minutes: 30
    steps:
    - name: copy of arbitrary installs from above
      run: |
        sudo apt-get update -q
        python -m pip install Cython
        python -m pip install numpy
        python --version
        python -m cython --version
        python -c "import numpy;print(numpy.__version__)"

        # this is to make the workqueue binary installer happy
        sudo apt-get install -y libpython3.5

    - uses: actions/checkout@master

    - name: Set up Python 3.10
      uses: actions/setup-python@v1
      with:
        python-version: "3.10"

    - name: Make deps
      run: |
        make deps

    - name: Documentation checks
      run: |
        pip install .[docs]
        sudo apt-get install -y pandoc
        cd docs

        test ! -e stubs

        # check we can build the docs without warnings
        make SPHINXOPTS=-W html

        cd ..
