name: Parsl

on:
  push:
    branches:
      - "*"
  pull_request:
    types:
      - opened
      - synchronize

jobs:
  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
      - name: Install requirements (...txt)
        run: |
          # libpython3.5: make workqueue binary installer happy
          # mpich: required by radical executor
          sudo apt-get update -q
          sudo apt-get install -y libpython3.5 mpich

          make virtualenv
          source .venv/bin/activate
          python -m pip install -U pip
          make deps
      - name: Check for missing __init__ files
        run: |
          source .venv/bin/activate
          make lint
      - name: flake8
        run: |
          source .venv/bin/activate
          make flake8
      - name: mypy
        run: |
          source .venv/bin/activate
          make mypy

  main-test-suite:
    strategy:
      matrix:
        python-version: ["3.12"]
        test-name: [
            "config_local_test"
        ]
    runs-on: ubuntu-20.04
    timeout-minutes: 25

    steps:
    - uses: actions/checkout@master

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Non-requirements based install
      run: |
        python --version
        sudo apt-get update -q

        # libpython3.5: make workqueue binary installer happy
        # mpich: required by radical executor
        sudo apt-get install -y libpython3.5 mpich

    - name: Install requirements (...txt)
      run: |
        make virtualenv
        source .venv/bin/activate
        python -m pip install -U pip
        make deps
        python -m pip install .
        python -m pip install .[monitoring,radical-pilot,visualization,proxystore]

    - name: make ${{ matrix.test-name }}
      run: |
        source .venv/bin/activate
        make local_thread_test htex_local_test htex_local_alternate_test wqex_local_test vineex_local_test radical_local_test config_local_test

    - name: Checking parsl-visualize
      if: ${{ matrix.test-name == 'config_local_test' }}
      run: |
        source .venv/bin/activate
        sudo apt-get install -y graphviz
        parsl/tests/test-viz.sh

    - name: Archive runinfo logs
      if: ${{ always() }}
      uses: actions/upload-artifact@v3
      with:
        name: runinfo-${{ matrix.python-version }}
        path: runinfo/

  documentation-checks:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@master
    - uses: actions/setup-python@v4
      with:
        python-version: "3.12"
    - name: Documentation checks
      run: |
        sudo apt-get update -q
        sudo apt-get install -y pandoc
        make virtualenv
        source .venv/bin/activate
        python -m pip install -U pip
        python -m pip install .[docs]

        cd docs

        test ! -e stubs

        # check we can build the docs without warnings
        PYTHONPATH=/tmp/cctools/lib/python3.8/site-packages make SPHINXOPTS=-W html

        cd ..

        # assert that none of the runs in this test have put an ERROR message into a
        # database manager log file or monitoring router log file. It would be better if
        # the tests themselves failed immediately when there was a monitoring error, but
        # in the absence of that, this is a dirty way to check.
        bash -c '! grep ERROR runinfo*/*/database_manager.log'
        bash -c '! grep ERROR runinfo*/*/monitoring_router.log'
